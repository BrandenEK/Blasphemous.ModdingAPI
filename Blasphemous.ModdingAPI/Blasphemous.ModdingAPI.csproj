<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net35</TargetFramework>
    <LangVersion>latest</LangVersion>

    <Title>Modding API</Title>
    <Product>Modding API</Product>
    <Authors>Damocles</Authors>
    <Company>Damocles</Company>
    <Description>A modding api for the game blasphemous that allows other mods to run</Description>
    <Version>2.0.0</Version>

    <TargetName>ModdingAPI</TargetName>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <DocumentationFile>obj\Release\ModdingAPI.xml</DocumentationFile>
    <RepositoryUrl>https://github.com/BrandenEK/Blasphemous-Modding-API</RepositoryUrl>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
    <PackageReference Include="BepInEx.Core" Version="5.*" />
    <PackageReference Include="Blasphemous.ModdingReferences" Version="4.0.67" />
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="UnityEngine.Modules" Version="2017.4.40" IncludeAssets="compile" />
  </ItemGroup>

  <Target Name="Development" AfterTargets="PostBuildEvent">

    <!-- Get resource files -->
    <PropertyGroup>
      <ResourcesFolder>$(SolutionDir)resources\</ResourcesFolder>
    </PropertyGroup>
    <ItemGroup>
      <DataDlls Include="$(ResourcesFolder)data\*" />
      <DataFiles Include="$(ResourcesFolder)data\$(Product)\*" />
      <Levels Include="$(ResourcesFolder)levels\$(Product)\*" />
      <Localization Include="$(ResourcesFolder)localization\*" />
    </ItemGroup>

    <!-- Copy plugin & resources to development folder -->
    <PropertyGroup>
      <DevFolder>C:\Program Files (x86)\Steam\steamapps\common\Blasphemous\Modding\</DevFolder>
    </PropertyGroup>
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(DevFolder)plugins" />
    <Copy SourceFiles="@(DataDlls)" DestinationFolder="$(DevFolder)data" />
    <Copy SourceFiles="@(DataFiles)" DestinationFolder="$(DevFolder)data\$(Product)" />
    <Copy SourceFiles="@(Levels)" DestinationFolder="$(DevFolder)levels\$(Product)" />
    <Copy SourceFiles="@(Localization)" DestinationFolder="$(DevFolder)localization" />

    <!-- Export & zip all mod files -->
    <PropertyGroup>
      <ExportFolder>$(SolutionDir)publish\$(TargetName)\</ExportFolder>
    </PropertyGroup>
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(ExportFolder)plugins" />
    <Copy SourceFiles="@(DataDlls)" DestinationFolder="$(ExportFolder)data" />
    <Copy SourceFiles="@(DataFiles)" DestinationFolder="$(ExportFolder)data\$(Product)" />
    <Copy SourceFiles="@(Levels)" DestinationFolder="$(ExportFolder)levels\$(Product)" />
    <Copy SourceFiles="@(Localization)" DestinationFolder="$(ExportFolder)localization" />
    <ZipDirectory SourceDirectory="$(ExportFolder)" DestinationFile="$(ExportFolder)..\$(TargetName).zip" Overwrite="true" />

  </Target>

  <Target Name="AddGeneratedFile" BeforeTargets="BeforeCompile;CoreCompile" Inputs="$(MSBuildAllProjects)" Outputs="$(IntermediateOutputPath)GeneratedFile.cs">

    <!-- Create ModInfo class from relevant data -->
    <PropertyGroup>
      <GeneratedText>
        <![CDATA[ namespace $(RootNamespace) { internal static class ModInfo { public const string MOD_ID = "$(AssemblyName)"%3B public const string MOD_NAME = "$(Product)"%3B public const string MOD_AUTHOR = "$(Company)"%3B public const string MOD_VERSION = "$(Version)"%3B } } ]]>
      </GeneratedText>
      <GeneratedFilePath>$(IntermediateOutputPath)ModInfo.cs</GeneratedFilePath>
    </PropertyGroup>

    <!-- Write ModInfo data to intermediate output -->
    <ItemGroup>
      <Compile Include="$(GeneratedFilePath)" />
      <FileWrites Include="$(GeneratedFilePath)" />
    </ItemGroup>
    <WriteLinesToFile Lines="$(GeneratedText)" File="$(GeneratedFilePath)" WriteOnlyWhenDifferent="true" Overwrite="true" />

  </Target>
  
</Project>

